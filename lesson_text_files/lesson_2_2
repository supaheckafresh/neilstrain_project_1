crap = ['Lesson 2: Variables and Strings', [['Variables', 'A variable is a name that refers to an expression. An expression can be many things, including any combination of values, strings, and other variables -- one can imagine variables are infinitely useful and common in serious computer programs. A variable is also something that can vary. That is to say that a variable can be made to refer to a different expression than its original assignment, and then to any number of other expressions, in turn. Or, a variable may be assigned to an expression that contains any number of other variables, which themselves can change. Variables are important because they can be used to store just about any data imagineable, and they also make code a lot easier to read when used effectively.'], ['How to Create a Variable in Python', 'You can make a new variable with an assignment statement, as follows: ##P code* name = expression ##P Note that the “=” in the above assignment statement means something fundamentally different than an “=” sign in an algebraic equation. In math “=” means equality; in Python, it means take the expression on the right side of the statement and store it in the variable name on the left.'], ['What is a String', 'A string is a sequence of characters surrounded by single or double quotation. Characters include any valid characters such as letters or numerals, and also special characters such as quotation marks.'], ['Concatenation', 'The “+” operator is used in Python to concatenate (or link together) strings. If used with numbers, the “+” operator assumes its expected mathematical function, giving a sum. Numbers and strings can’t be added together -- this is a semantic error in Python, meaning it just defies logic to try to do this. For some reason, though, the “*” operator duplicates and concatenates a string with itself n times, where n is the multiple of the string. To me, this really doesn’t make intuitive sense at all, but I suppose this could be a useful shortcut in certain scenarios & definitely seems important to be aware of for learning Python. An example of this behavior: ##P *code  print “8” * 3 results in 888'], ['Indexing Strings', 'Indexing is used to return a one character string from an existing string. The characters in a string are automatically enumerated, where the 0th character is actually the first character of the string. For example, to print the first character of any string, one can use the following Python code: ##P print “this is a string”[0] returns t ##P Note that the 0 in the above statement can be replaced with any expression, not just with a number.  ##P To return characters starting from the end of the string, negative values can be used within the brackets, where [-1] returns the last character, [-2] the second-to-last, etc.'], ['Indexing Sub-Sequences from Strings', 'This is conceptually similar to indexing strings, however this method can result in strings containing more than one character. Here is how this looks in Python: ##P <string>[<expression>:<expression>] ##P start stop ##P ‘Neil’[0:1] → N   (doesn’t print 1 because it STOPs on 1) ##P ‘Neil’[:2] → Ne ##P ‘Neil’[ : ] → Neil'], ['The Find Method', 'Find is a built in Python operation that returns a value based on whether or not it finds a specified target string within a search string.  ##P <string>.find(<string>) → number (index position) ##P Where the <string> in the parenthesis is the first argument to Find. ##P If the target string is found within the search string, Find will return the index number where the target string starts. If the target string is not found, -1 is returned.  ##P Find also takes a number as a second argument, indicating at what index position of the search string it will start looking for the target string. ##P <string>.find(<string>,<number>)']]]